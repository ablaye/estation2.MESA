#!/bin/sh

# TODO: 
#   -> get the new version automatically
#   -> Source user credentials from a config file ?
#

new_version="2.0.1"

# Define a logfile
mkdir -p /var/log/eStation2/  
logfile="/var/log/eStation2/upgrade_ps-database_${new_version}.log"

uname=$(uname -n)
echo "Machine Name = ${uname}" >> ${logfile}

# --------------------------------------------------------------------------------------
#	Common Definitions
# --------------------------------------------------------------------------------------
# Define base dirs (to be moved somewhere else and sourced)
base_dir_db_data="/eStation2/dbdata"	# it is to be on Disk1 (system)
base_dir_system="/srv/www/eStation2"	# it is to be on Disk2 (system)
base_dir_data="/data"			# it is to be on Disk2 (data)


# --------------------------------------------------------------------------------------
#	Postgresql DB management
#	- create estationdb 		(in installation from scratch)
#	- run the upgrade script     	(in case of upgrade)
# --------------------------------------------------------------------------------------

# check localhost reachable - or abort
if [ ! "$(nc -v -z localhost 5432 2> /dev/null;echo $?)" = 0 ]; then
    echo "Postgresql is not running. Exit the install pstinst." > ${logfile}
    exit 1
fi
echo "Postgresql is running." > ${logfile}

#  user exists ? otherwise create it.
if [ ! "$(su postgres -c "psql -c 'select usename from pg_user'"|grep estation)" ];then
        echo "Create User and Database" >> ${logfile}
        su postgres -c psql << EOF
CREATE USER estation;
EOF
fi

# estationdb exists ? otherwise create it.
if [ ! "$(su postgres -c "psql -c 'select datname from pg_database'"|grep estation)" ];then
        echo "Create User and Database" >> ${logfile}
        su postgres -c psql << EOF
CREATE DATABASE estationdb WITH OWNER estation;
ALTER ROLE estation WITH CREATEDB;
ALTER USER estation WITH ENCRYPTED PASSWORD 'mesadmin';
EOF
fi

# Read actual version (if any - for upgrade only)
file_vers=$(find "$base_dir_system/database/" -name "version_*")
if [ ! -z "$file_vers" ]; then
	actual_version=$(echo ${file_vers} | awk -F'_' '{print $2}')
	echo "Existing Version = ${actual_version}" >> ${logfile}
fi
rm -f "$base_dir_system/version_*"

#Update for migrating database to new version
if [ ! -z "${actual_version}" ];then
    echo "Upgrade database structure with script: "$base_dir_system/database/update_${actual_version}_to_${new_version}.sql"" >> ${logfile}
    psql -h localhost -U estation -d estationdb -f "$base_dir_system/database/update_${actual_version}_to_${new_version}.sql" >> ${logfile} 2>&1  

elif [ ! "$(su postgres -c "psql -d estationdb -c 'select * from products.mapset'" 2> /dev/null)" ];then
    #First install from scratch data
    echo "Create database structure" >> ${logfile}
    #createlang -h localhost -U estation plpgsql estationdb

    psql -h localhost -U estation -d estationdb -f "$base_dir_system//database/dump_database_structure.sql" >> ${logfile} 2>&1 
    #echo "Extended Features" >> ${logfile}
    #su postgres -c "psql -h localhost -U postgres -d estationdb < /etc/eStation/database/admin.sql"
    #su postgres -c "psql -h localhost -U postgres -d estationdb < /etc/eStation/data/etc/eStation/database/admin.sqlbase/adminpack.sql"
fi

# Update Tables (both for upgrade and installation from scratch)
echo "Populate database tables" #>> ${logfile}
psql -h localhost -U estation -d estationdb -f "$base_dir_system/database/dump_database_data.sql" >> ${logfile} 2>&1 

# Automatically added by dh_installinit
if [ -x "/etc/init.d/postgresql" ]; then
    echo "Restart postgresql" >> ${logfile}
    if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
        invoke-rc.d postgresql restart || exit $?
    else
        /etc/init.d/postgresql restart || exit $?
    fi
fi
